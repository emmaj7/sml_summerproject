<!--
Level 2.
Emma Johansson
Last updated: 2019-07-25
-->

<!DOCTYPE html>
<html lang="en">
  <head>
    <title>TRIP TO MARS</title>
    <!-- This partial contains all imports. -->
    <% include partials/imports.ejs %>
  </head>
  <body>
    <div class="text-center" style="height:65px">
      <h1 class="text-center" style="font-family: courier; margin-top: 10px; padding:0px; color:white; font-weight:bold;">TRIP TO MARS: level 2</h1>
    </div>
    <div>
      <span id="placement"></span>
      <xml id="toolbox" style="display: none">
        <block type="forward_block"></block>
        <block type="backward_block"></block>
        <block type="turn_block_left"></block>
        <block type="turn_block_right"></block>
      </xml>
      <!-- This partial has all the relevant code related to the simulation window. -->
      <% include partials/simulationWindow.ejs %>
      <div class="d-flex justify-content-center my-5" style="z-index:1000;">
        <!-- This partial contains the spinner shown before the rover starts moving. -->
        <% include partials/spinner.ejs %>
      </div>
    </div>
    <div class="text-center" id="buttonDiv" style="margin-top: 825px;">
      <!-- This partial contains function which shows/hides run/cancel-buttons. -->
      <% include partials/runOrCancelBtns.ejs %>
    </div>
    <div>
      <!-- This partial contains the help-tab.  -->
      <% include partials/helpTab.ejs %>

      <!-- This partial contains modal shown if goal is reached. -->
      <% include partials/modal1and2.ejs %>

      <!-- This partial contains modal shown if goal is not reached. -->
      <% include partials/tryAgainModal.ejs %>

      <!-- This partial contains modal shown if obstacle is hit. -->
      <% include partials/hitModal.ejs %>

      <!-- This partial contains modal shown if wall is hit. -->
      <% include partials/wallModal.ejs %>
    </div>
  </body>
  <script>
    // This partial contains functions calculating positioning of workspace
    <% include partials/workspacePlacementFunctions.js %>

    // This function is the same for all pages.
    <% include partials/runCodeFunction.js %>

    var workspaceTop = placeWorkspaceTop();

    var workspaceLeft = placeWorkspaceLeft();

    // Inserting positioning in string
    var string = `<div id="blocklyDiv" style="position: absolute; z-index: 100; height: 800px; width: 800px; margin-left:${workspaceLeft}px; top:${workspaceTop}px;"></div>`;
    document.getElementById("placement").innerHTML = string;

    var workspace = Blockly.inject('blocklyDiv',
                                    {toolbox: document.getElementById('toolbox'),
                                    verticalLayout: true,
                                    trashcan: true,
                                    scrollbars: false,
                                    theme: Blockly.Themes.HighContrast});
    // ID generated uniquely for each window.
    var unique_id = (Math.random()*Math.pow(10,18)).toString();
    // The position of the goal for level 2.
    var goal_coords = {'x': 0.80, 'y': 0.80, 'yaw': 0};
    // Position of obstacles on level 2
    var obstacle_coords = [{x: 0.8, y: 0.0, yaw: 0, size: 0.3}];


    var level = 2;
    var modalBodyStr = `<p style="font-size: 30px;">You solved level ${level} with the following Python code:</p>
                        <div class="code-box" style="width: 275px; margin: 0 auto;">
                            <pre style="color: #ff6d44; font-size: 20px;" id='code'></pre>
                        </div>
                        <p style="font-size: 30px;"> Continue to level ${level+1}?</p>`;
    var modalFooterStr = `<a href="/level${level}" ><button class="cool-btn2 btn1 btn" id="btn1" style="text-decoration: none !important; margin-left:10px; margin-right: 10px;"><p style="position: relative; z-index: 4000; margin-bottom: 0px;">Cancel</p></button></a>
                        <a href="/level${level+1}" ><button class="cool-btn2 btn1 btn" id="btn1" style="text-decoration: none !important; margin-left:10px; margin-right: 10px;"><p style="position: relative; z-index: 4000; margin-bottom: 0px;">OK</p></button></a>`
    document.getElementById("modalBody").innerHTML = modalBodyStr;
    document.getElementById("modalFooter").innerHTML = modalFooterStr;
    var runningSimulation = false;
    let cancel_simulation = false;
    function cancelSimulation(){
      cancel_simulation = true;
    }

    // Checking which button should be shown (run or cancel)
    runOrCancel();
  </script>
</html>
