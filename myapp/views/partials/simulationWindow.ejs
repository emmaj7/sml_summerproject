<!--
Code for the simulation window.
Created by: Mikael Glamheden
Date: 2019-06-24

Last edited by: Mikael Glamheden & Emma Johansson
Date: 2019-07-10
-->

<!-- Uses pixi module for the animation. Socket for the communication with server. -->
<script src="../node_modules/pixi.js/dist/pixi.min.js"></script>
<script src="../node_modules/socket.io-client/dist/socket.io.js"></script>
<script src="https://code.jquery.com/jquery-1.11.1.js"></script>
<div>
    <!-- <button onclick="runCar()" type="button">Starta simuleringen</button> -->
    <!-- <h1>Simulation Window</h1> -->

</div>
<div>
  <script type="text/javascript">
  /*----------------
  THE ANIMATION PART
  ----------------*/
  let type = "WebGL";
  if(!PIXI.utils.isWebGLSupported()){
    type = "canvas"
  }
  PIXI.utils.sayHello(type); // prints to console if everything is working.
  //Aliases
  let Application = PIXI.Application,
  loader = PIXI.loader,
  resources = PIXI.loader.resources,
  TextureCache = PIXI.utils.TextureCache,
  Sprite = PIXI.Sprite,
  Rectangle = PIXI.Rectangle;
  //Create a Pixi Application
  let app = new Application({
    width: 800,         // default: 800
    height: 800,        // default: 800
    antialias: true,    // default: false
    transparent: false, // default: false
    resolution: 1,      // default: 1
    forceCanvas: false  // force to use drawng API instead of WebGL


  });

  // FLYTTA DESSA TVÃ… FUNKTIONER TILL sim.WindowFunctions?

  // Function making the placement (right margin) of the simulation window dynamic
  function placeSimulationRight(){
    var windowWidth = window.innerWidth;
    var marginRightSimulation = (((windowWidth/2)-800)/2)+(((windowWidth/2)-800)/4);
    // var marginLeftSimulation = 3*(((windowWidth/2)-800)/2)+800;
    marginRightSimulation = Math.ceil(marginRightSimulation);
    var rightStr = marginRightSimulation.toString() + "px";
    return rightStr;
  }

  // Function making the placement (top margin) of the simulation window dynamic
  function placeSimulationTop(){
    var windowHeight = window.innerHeight;
    console.log("height, enligt simulering: " + windowHeight);
    var marginTopSimulation = (windowHeight-800)*0.35;
    // var marginLeftSimulation = 3*(((windowWidth/2)-800)/2)+800;
    marginTopSimulation = Math.ceil(marginTopSimulation);
    var topStr = marginTopSimulation.toString() + "px";
    console.log("marginTop, enligt simulering: " + marginTopSimulation);
    return topStr;
  }

  var simRightMargin = placeSimulationRight();
  var simTopMargin = placeSimulationTop();

  // Change background color
  app.renderer.backgroundColor = 0x0DA765B;
  // access style of window
  app.renderer.view.style.position = "absolute";
  app.renderer.view.style.right = simRightMargin;
  app.renderer.view.style.top = simTopMargin;

  // Add the canvas that Pixi automatically created for you to the HTML document
  document.body.appendChild(app.view);

  // Variables for the simulation
  let car; // object for car sprite
  let hitbox; // hitbox / shadow of car.
  let x_offset = 0.3;
  let y_offset = 0.4; // starting offset of car from lower left corner.
  let real_length = 3; // length of map in meters.
  let scale_factor = app.renderer.view.height/real_length;
  let last_yaw = 0;
  let dt = 1/30;
  let max = real_length/2;
  let start_coords = {'x': -max + x_offset,'y': -max + y_offset, 'yaw': 0}; // possibly move to level pages.
  let x = start_coords.x;
  let y = start_coords.y;
  let yaw = start_coords.yaw;
  let marg = 0.2; // margin to goal that counts as reached.
  let text0, text1, text2, text3, text4; // holds the 5 car sprite textures.
  let curr_sprite; // current displayed texture nr
  let obstacleHit = false;
  let wallHit = false;
  let obstacles = [];
  //load an image and run the `setup` function when it's done
  loader
  .add(['./images/svea_cars2.png',
        './images/mars-background2.png',
        './images/new.png',
        './images/circle.png',
        './images/cross.png',
        './images/stone.png',
        './images/rectangle.png'])
  .load(setup);

  function configureSprite(sprite, xScale, yScale, xAnchor, yAnchor, x, y, yaw, visibility){
    sprite.scale.x = xScale;
    sprite.scale.y = yScale;
    sprite.anchor.x = xAnchor;
    sprite.anchor.y = yAnchor;
    pxCoords = coordinateTransform(x, y, yaw);
    sprite.position.set(pxCoords.x, pxCoords .y);
    sprite.rotation = pxCoords.yaw;
    sprite.visible = visibility;
  }
  // This `setup` function will run when the image has loaded
  function resize_image(image){
    let imageRatio = image.width / image.height;
    let containerRatio = app.renderer.view.width / app.renderer.view.height;

    if (containerRatio > imageRatio) {
    	image.height = image.height / (image.width / app.renderer.view.width);
    	image.width = app.renderer.view.width;
    	image.position.x = 0;
    	image.position.y = (app.renderer.view.height - image.height) / 2;
    } else {
    	image.width = image.width / (image.height / app.renderer.view.height);
    	image.height = app.renderer.view.height;
    	image.position.y = 0;
    	image.position.x = (app.renderer.view.width - image.width) / 2;
    }
    return image;
  }
  function setup() {
    // Create the textures
    let rectangle0 = new Rectangle(0, 288*0, 413, 288);
    text0 = new PIXI.Texture(resources["./images/svea_cars2.png"].texture, rectangle0);
    let rectangle1 = new Rectangle(0, 288*1, 413, 288);
    text1 = new PIXI.Texture(resources["./images/svea_cars2.png"].texture, rectangle1);
    let rectangle2 = new Rectangle(0, 288*2, 413, 288);
    text2 = new PIXI.Texture(resources["./images/svea_cars2.png"].texture, rectangle2);
    let rectangle3 = new Rectangle(0, 288*3, 413, 288);
    text3 = new PIXI.Texture(resources["./images/svea_cars2.png"].texture, rectangle3);
    let rectangle4 = new Rectangle(0, 288*4, 413, 288);
    text4 = new PIXI.Texture(resources["./images/svea_cars2.png"].texture, rectangle4);


    // Init background
    background = new Sprite(resources["./images/mars-background2.png"].texture);
    background = resize_image(background);
    app.stage.addChild(background);

    // init obstacles
    for (var i = 0; i < obstacle_coords.length; i++) {
      obstacle = new Sprite(resources["./images/rectangle.png"].texture);
      obstacle_drawing = new Sprite(resources["./images/stone.png"].texture);
      configureSprite(obstacle,
                      obstacle_coords[i].size,
                      obstacle_coords[i].size,
                      0.5,
                      0.5,
                      obstacle_coords[i].x,
                      obstacle_coords[i].y,
                      obstacle_coords[i].yaw,
                      false);
      configureSprite(obstacle_drawing,
                      obstacle_coords[i].size,
                      obstacle_coords[i].size,
                      0.5,
                      0.5,
                      obstacle_coords[i].x,
                      obstacle_coords[i].y,
                      obstacle_coords[i].yaw,
                      true);
      app.stage.addChild(obstacle);
      app.stage.addChild(obstacle_drawing);
      obstacles.push(obstacle);
    }

    // Init goal
    let goal = new Sprite(resources["./images/new.png"].texture);
    let goal_scale = {x: 0.6, y: 0.6};
    let goal_achor = {x: 0.5, y: 0.5};
    configureSprite(goal,
                    goal_scale.x,
                    goal_scale.y,
                    goal_achor.x,
                    goal_achor.y,
                    goal_coords.x,
                    goal_coords.y,
                    goal_coords.yaw,
                    true);
    app.stage.addChild(goal);
    cross = new Sprite(resources["./images/cross.png"].texture);
    cross_scale = {x: 0.4, y: 0.4};
    cross_anchor = {x: 0.5, y: 0.5}
    configureSprite(cross,
                    cross_scale.x,
                    cross_scale.y,
                    cross_anchor.x,
                    cross_anchor.y,
                    goal_coords.x,
                    goal_coords.y,
                    goal_coords.yaw,
                    true);
    //app.stage.addChild(cross);

    // Init car and hitbox.
    curr_sprite = 2; // starting texture for car.
    car = new Sprite(text2);
    let car_anchor = {x: 0.5, y: 0.5};
    configureSprite(car,
                    real_length*(90/app.renderer.width),
                    real_length*(90/app.renderer.height),
                    car_anchor.x,
                    car_anchor.y,
                    start_coords.x,
                    start_coords.y,
                    start_coords.yaw,
                    true);
    hitbox = new Sprite(resources["./images/rectangle.png"].texture);
    configureSprite(hitbox,
                    1,
                    1,
                    car_anchor.x,
                    car_anchor.y,
                    start_coords.x,
                    start_coords.y,
                    start_coords.yaw,
                    true);
    hitbox.height = car.height - 50; hitbox.width = car.width - 20;
    app.stage.addChild(hitbox);
    app.stage.addChild(car);
  }
  </script>
</div>
<div>
  <script type="text/javascript">

    // import functions relevant to simulate the car.
    <% include simulationWindowFunctions.js %>

    // updates position of car.
    function drive(){
      // console.log(hitbox.width);
      let coords = coordinateTransform(x, y, yaw);
      car.position.set(coords.x, coords.y);
      car.rotation = coords.yaw;
      hitbox.position.set(coords.x, coords.y);
      hitbox.rotation = coords.yaw;

      // changes sprite to display depending on how much car is turning.
      let response = newSprite(yaw, curr_sprite);
      if (response.value) {
        changeSprite(response.sprite);
      }
      // Check for obstacle collision
      for (var i = 0; i < obstacles.length; i++) {
        if (collision(hitbox, obstacles[i])) {
          obstacleHit = true;
        }
      }
      // check for collision with map edge
      if (edgeCollision(hitbox)){
        wallHit = true
      }
    }

    // Checks if car is at goal.
    function atGoal(){
      let dist = Math.sqrt(Math.pow(x-goal_coords.x, 2) + Math.pow(y-goal_coords.y, 2));
      if (dist < marg){
          return true;
      } else {
        return false;
      }
    }

    // Called when run code button pressed.
    function runSimulation(){
      app.ticker.start()
      var socket = io();
      curr_sprite = 5;
      obstacleHit = false;
      wallHit = false;
      x = start_coords.x;
      y = start_coords.y;
      yaw = start_coords.yaw;

      // start two-way communication
      socket.on('connect',function(){
        console.log('Connected');
        console.log('Session id: ' + unique_id); // Unique id for each html page opened.
        socket.emit('simulationOnly', JSON.stringify({'id': unique_id,
                                                      'start': start_coords,
                                                      'goal': goal_coords}));
        console.log('starting simulation');
        runningSimulation = true;
        //Hide run - show cancel
        runOrCancel();

      });

      // recieves position. Updates car position in simulation.
      socket.on('position-sent-sim', function(msg){

        // Hides spinner
        var spinner = document.getElementById('spinner');
        spinner.style.display = "none";

        let obj = JSON.parse(msg);
        x = obj.x;
        y = obj.y;
        last_yaw = yaw;
        yaw = obj.yaw;

        if (obstacleHit || wallHit){
          socket.emit('collision');
          console.log('Collision!');
        }
        if (cancel_simulation){
          console.log('cancelling simulation');
          socket.emit('cancel-simulation');
          cancel_simulation = false;
        }
      });
      // Called when python script is closed. Either forced or natural.
      socket.on('close', function(forced_close){
        app.ticker.stop();
        console.log()
        console.log('Connection closed');
        socket.disconnect(true); // close connection to server.
        at_goal = atGoal(); // variable from level.
        console.log('At goal: ' + at_goal.toString());
        document.getElementById('modal');

        if (at_goal.toString() === 'true'){ // Completed level 1
          runningSimulation = false;
          runOrCancel();
          if (level === 1){
            var modal1 = document.getElementById('myModal');
            modal1.style.display = "block";
            window.onclick = function(event) {
              if (event.target == modal1) {
                modal1.style.display = "none";
              }
            }
          } else if (level === 2){ // Completed level 2
            var modal2 = document.getElementById('myModal');
            modal2.style.display = "block";
            window.onclick = function(event) {
              if (event.target == modal2) {
                modal2.style.display = "none";
              }
            }
          } else if (level === 3){ // Completed level 3
            var modal3 = document.getElementById('myModal3');
            modal3.style.display = "block";
            window.onclick = function(event) {
              if (event.target == modal3) {
                modal3.style.display = "none";
              }
            }
          }
        } else if (obstacleHit) { // Hit obstacle on either level
          console.log("Nu har vi krockat med ett hinder...");
          var tryAgainBtn = document.getElementById('restartBtn');
          console.log("Hittat knapp?" + tryAgainBtn);
          var hitModal = document.getElementById('myHitModal');
          console.log("Hittat modal?" + hitModal);
          hitModal.style.display = "block";
          console.log("Visar modal");
          tryAgainBtn.onclick = function() {
            hitModal.style.display = "none";
            runningSimulation = false;
            runOrCancel();
          }
        } else if (wallHit) { // Hit wall on either level
          console.log("Nu har vi krockat med en vÃ¤gg...");
          var tryAgainBtn = document.getElementById('restart2Btn');
          console.log("Hittat knapp?" + tryAgainBtn);
          var wallModal = document.getElementById('myWallModal');
          console.log("Hittat modal?" + wallModal);
          wallModal.style.display = "block";
          console.log("Visar modal");
          tryAgainBtn.onclick = function() {
            wallModal.style.display = "none";
            runningSimulation = false;
            runOrCancel();
          }
        } else {
            if (forced_close) {
              runningSimulation = false;
              runOrCancel();
            } else { // Did not reach goal
              var spinner = document.getElementById('spinner');
              spinner.style.display = "none";

              var tryAgainBtn = document.getElementById('tryAgainBtn');

              var tryAgainModal = document.getElementById('myTryAgainModal');

              tryAgainModal.style.display = "block";

              tryAgainBtn.onclick = function() {
                tryAgainModal.style.display = "none";
                runningSimulation = false;
                runOrCancel();
              }
            }
          }

      });

      // This function is run at 60 Hz. Defined by app.ticker.
      app.ticker.add(delta => drive(delta));
    }

  </script>
</div>
