<!doctype html>
<html>
<head>
  <meta charset="utf-8">
  <title>Hello World</title>
</head>
  <!-- Uses pixi module for the animation -->
  <script src="../node_modules/pixi.js/dist/pixi.min.js"></script>
<body>
  <script type="text/javascript">

    /*----------------
    THE ANIMATION PART
    ----------------*/
    let type = "WebGL"
    if(!PIXI.utils.isWebGLSupported()){
      type = "canvas"
    }
    PIXI.utils.sayHello(type) // prints to console if everything is working.

    //Aliases
    let Application = PIXI.Application,
        loader = PIXI.loader,
        resources = PIXI.loader.resources,
        Sprite = PIXI.Sprite;

    //Create a Pixi Application
    var window_size = 512;
    let app = new Application({
        width: window_size,         // default: 800
        height: window_size,        // default: 600
        antialias: true,    // default: false
        transparent: false, // default: false
        resolution: 1,      // default: 1
        forceCanvas: false  // force to use drawng API instead of WebGL
      }
    );
    // Change background color
    app.renderer.backgroundColor = 0x061639;

    //Add the canvas that Pixi automatically created for you to the HTML document
    document.body.appendChild(app.view);

    //load an image and run the `setup` function when it's done
    loader
      .add("./images/car2.png")
      .load(setup);

    // Variables for the simulation
    var PI = 3.1415;
    var x_offset = 50;
    var y_offset = -20;
    var scale_factor = 256/2;
    var x_cord = 0;
    var y_cord = 0;
    var yaw = 0;
    var xp;
    var yp;
    let car;

    // This `setup` function will run when the image has loaded
    function setup() {

      // Create the car sprite
      car = new Sprite(resources["./images/car2.png"].texture);
      // Change the sprite's size
      car.scale.x = 0.2;
      car.scale.y = 0.2;
      // // change anchor point
      car.anchor.x = 0.5;
      car.anchor.y = 0.5;
      // Add the cat to the stage
      app.stage.addChild(car);
      app.ticker.add(delta => drive(delta));
    }
    // This function is run at 60 Hz. Defined by app.ticker.
    function drive(){
      xp = scale_factor*x_cord + x_offset;
      yp = window_size - scale_factor*y_cord + y_offset; // y = 0 is upper corner
      car.position.set(xp,yp);
      car.rotation = -yaw;
    }

    /*----------------
    THE LISTENING PART
    ----------------*/

    // listen to data stream from testpage/button
    if (!!window.EventSource) {
      var source = new EventSource('testpage/button');
    } else {
      // Result to xhr polling :(
      console.log('Error setting up event stream');
    }
    // The important part
    source.addEventListener('message', function(e) {
      var obj = JSON.parse(e.data);
      x_cord = obj.x;
      y_cord = obj.y;
      yaw = obj.yaw;
      // console.log(e.data);

    }, false);
    source.addEventListener('open', function(e) {
      // Connection was opened.
      console.log('Connection opened');
    }, false);

    source.addEventListener('error', function(e) {
      if (e.readyState == EventSource.CLOSED) {
        // Connection was closed.
        console.log('Connection closed');
      }
    }, false);
  </script>
</body>

</html>
